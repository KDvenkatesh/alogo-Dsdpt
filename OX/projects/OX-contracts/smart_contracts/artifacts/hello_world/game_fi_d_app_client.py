# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "sender"}], "name": "create", "returns": {"type": "void"}, "desc": "Initialize contract with creator as admin.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "sender"}, {"type": "uint64", "name": "amount"}], "name": "deposit_algo", "returns": {"type": "void"}, "desc": "Deposit ALGO to player balance.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "sender"}, {"type": "uint64", "name": "amount"}], "name": "withdraw_algo", "returns": {"type": "void"}, "desc": "Withdraw ALGO from player balance.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "sender"}, {"type": "uint64", "name": "game_id"}, {"type": "byte[]", "name": "fee_asset"}, {"type": "uint64", "name": "fee_amount"}], "name": "enter_game", "returns": {"type": "void"}, "desc": "Player enters a game, fee escrowed.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "sender"}, {"type": "uint64", "name": "game_id"}, {"type": "address", "name": "winner"}, {"type": "byte[]", "name": "result"}], "name": "resolve_game", "returns": {"type": "void"}, "desc": "Resolve game, distribute rewards.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "sender"}, {"type": "byte[]", "name": "from_asset"}, {"type": "byte[]", "name": "to_asset"}, {"type": "uint64", "name": "amount"}, {"type": "uint64", "name": "min_out"}], "name": "swap_tokens", "returns": {"type": "void"}, "desc": "Swap tokens (simulated) using AlgoPy types.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "sender"}, {"type": "uint64", "name": "amount"}], "name": "release_escrow", "returns": {"type": "void"}, "desc": "Admin-only release of escrowed ALGO to a receiver (simplified).", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "sender"}, {"type": "byte[]", "name": "symbol"}, {"type": "uint64", "name": "price"}], "name": "update_oracle", "returns": {"type": "void"}, "desc": "Update asset price from oracle (admin only).", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "sender"}, {"type": "uint64", "name": "game_id"}, {"type": "byte[]", "name": "result"}], "name": "update_game_result", "returns": {"type": "void"}, "desc": "Update game result from backend/oracle.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "validate_security", "returns": {"type": "void"}, "desc": "Run basic security checks (ensures no underflow in sample balances).", "events": [], "readonly": false, "recommendations": {}}], "name": "GameFiDApp", "state": {"keys": {"box": {}, "global": {"admin": {"key": "YWRtaW4=", "keyType": "AVMString", "valueType": "address"}, "treasury_algo": {"key": "dHJlYXN1cnlfYWxnbw==", "keyType": "AVMString", "valueType": "AVMUint64"}, "treasury_mint": {"key": "dHJlYXN1cnlfbWludA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "treasury_spot": {"key": "dHJlYXN1cnlfc3BvdA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "game_fee": {"key": "Z2FtZV9mZWU=", "keyType": "AVMString", "valueType": "AVMUint64"}, "mint_token_id": {"key": "bWludF90b2tlbl9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "spot_token_id": {"key": "c3BvdF90b2tlbl9pZA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "nft_template_id": {"key": "bmZ0X3RlbXBsYXRlX2lk", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {"player_algo": {"key": "cGxheWVyX2FsZ28=", "keyType": "AVMString", "valueType": "AVMUint64"}, "player_mint": {"key": "cGxheWVyX21pbnQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "player_spot": {"key": "cGxheWVyX3Nwb3Q=", "keyType": "AVMString", "valueType": "AVMUint64"}, "player_stake_mint": {"key": "cGxheWVyX3N0YWtlX21pbnQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "player_stake_spot": {"key": "cGxheWVyX3N0YWtlX3Nwb3Q=", "keyType": "AVMString", "valueType": "AVMUint64"}}}, "maps": {"box": {"oracle_prices": {"keyType": "AVMBytes", "valueType": "uint64", "prefix": "b3JhY2xlX3ByaWNlcw=="}, "oracle_game_results": {"keyType": "uint64", "valueType": "AVMBytes", "prefix": "b3JhY2xlX3Jlc3VsdHM="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 7}, "local": {"bytes": 0, "ints": 5}}}, "structs": {}, "byteCode": {"approval": "CyAEACAIASYJDXRyZWFzdXJ5X2FsZ28LcGxheWVyX2FsZ28FYWRtaW4LcGxheWVyX21pbnQLcGxheWVyX3Nwb3QEQUxHTwhnYW1lX2ZlZQRNSU5UBFNQT1QxG0EAVTEZFEQxGESCCgTMaU6qBKhjyaQEHWjsTARZWUKWBB9i2q8EB2FHtQRsRvLUBJeO3YYEreQw1gTeFF6mNhoAjgoACQB0AJ4AzgEaAWYCKwJPApAC1QAxGRQxGBQQQzYaAUkVIxJEKkxnKCJngA10cmVhc3VyeV9taW50ImeADXRyZWFzdXJ5X3Nwb3QiZycGImeADW1pbnRfdG9rZW5faWQiZ4ANc3BvdF90b2tlbl9pZCJngA9uZnRfdGVtcGxhdGVfaWQiZyVDNhoBSRUjEkQ2GgJJFSQSRBdLASIpY0RLAQhPAilPAmYiKGVECChMZyVDNhoBSRUjEkQ2GgJJFSQSRBdLASIpY0RJSwIPREsBCU8CKU8CZiIoZURMCShMZyVDNhoBSRUjEkQ2GgIVJBJENhoDSSJZgQIISwEVEkRXAgA2GgRJFSQSRBdMJwUSREsBIiljRElLAg9ESwEJTwIpTwJmIihlRAgoTGclQzYaARUjEkQ2GgIVJBJENhoDSRUjEkQ2GgRJIlmBAghMFRJEIicGZURJgQkLgQoKTEsBCUsCIiljRE8CCE8CKU8CZiIoZUQIKExnJUM2GgFJFSMSRDYaAkkiWYECCEsBFRJEVwIASTYaA0kiWYECCEsBFRJEVwIATDYaBEkVJBJEF0lOAjYaBUkVJBJEFw9EJwUSQQANSwNJIiljREsCCSlMZksCJwcSQQANSwNJIitjREsCCStMZksCJwgSQQAPSwNJIicEY0RLAgknBExmSwEnBRJBAA1LA0kiKWNESwIIKUxmSwEnBxJBAA1LA0kiK2NESwIIK0xmSwEnCBJBAA9LA0kiJwRjREsCCCcETGYlQzYaAUkVIxJENhoCSRUkEkQXIiplRE8CEkQiKGVETAkoTGclQzYaAUkVIxJENhoCSSJZgQIISwEVEkRXAgA2GgNJFSQSRBciKmVETwMSRIANb3JhY2xlX3ByaWNlc08CUEwWvyVDNhoBSRUjEkQ2GgJJFSQSRBc2GgNJIlmBAghLARUSRFcCACIqZURPAxJETBaADm9yYWNsZV9yZXN1bHRzTFBJvEhMvyVDIihlRQFD", "clear": "C4EBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [440], "errorMessage": "Insufficient ALGO balance"}, {"pc": [363], "errorMessage": "Insufficient balance"}, {"pc": [757, 810, 875], "errorMessage": "Not admin"}, {"pc": [97], "errorMessage": "OnCompletion must be NoOp"}, {"pc": [186], "errorMessage": "OnCompletion must be NoOp && can only call when creating"}, {"pc": [429], "errorMessage": "Only ALGO supported in demo"}, {"pc": [602], "errorMessage": "Slippage too high"}, {"pc": [753, 806, 871], "errorMessage": "check self.admin exists"}, {"pc": [499], "errorMessage": "check self.game_fee exists"}, {"pc": [316, 358, 435, 516, 615, 680], "errorMessage": "check self.player_algo exists for account"}, {"pc": [636, 701], "errorMessage": "check self.player_mint exists for account"}, {"pc": [658, 723], "errorMessage": "check self.player_spot exists for account"}, {"pc": [329, 376, 453, 529, 761, 908], "errorMessage": "check self.treasury_algo exists"}, {"pc": [412, 494, 557, 575, 790, 864], "errorMessage": "invalid number of bytes for (len+uint8[])"}, {"pc": [309, 351, 398, 423, 473, 587, 599, 748, 801, 849], "errorMessage": "invalid number of bytes for uint64"}, {"pc": [194, 301, 343, 391, 466, 481, 543, 740, 776, 841], "errorMessage": "invalid number of bytes for uint8[32]"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateArgs:
    """Dataclass for create arguments"""
    sender: str

    @property
    def abi_method_signature(self) -> str:
        return "create(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DepositAlgoArgs:
    """Dataclass for deposit_algo arguments"""
    sender: str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "deposit_algo(address,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class WithdrawAlgoArgs:
    """Dataclass for withdraw_algo arguments"""
    sender: str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "withdraw_algo(address,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class EnterGameArgs:
    """Dataclass for enter_game arguments"""
    sender: str
    game_id: int
    fee_asset: bytes | str
    fee_amount: int

    @property
    def abi_method_signature(self) -> str:
        return "enter_game(address,uint64,byte[],uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ResolveGameArgs:
    """Dataclass for resolve_game arguments"""
    sender: str
    game_id: int
    winner: str
    result: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "resolve_game(address,uint64,address,byte[])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SwapTokensArgs:
    """Dataclass for swap_tokens arguments"""
    sender: str
    from_asset: bytes | str
    to_asset: bytes | str
    amount: int
    min_out: int

    @property
    def abi_method_signature(self) -> str:
        return "swap_tokens(address,byte[],byte[],uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReleaseEscrowArgs:
    """Dataclass for release_escrow arguments"""
    sender: str
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "release_escrow(address,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateOracleArgs:
    """Dataclass for update_oracle arguments"""
    sender: str
    symbol: bytes | str
    price: int

    @property
    def abi_method_signature(self) -> str:
        return "update_oracle(address,byte[],uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateGameResultArgs:
    """Dataclass for update_game_result arguments"""
    sender: str
    game_id: int
    result: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "update_game_result(address,uint64,byte[])void"


class GameFiDAppParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create(
        self,
        args: tuple[str] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(address)void",
            "args": method_args,
        }))

    def deposit_algo(
        self,
        args: tuple[str, int] | DepositAlgoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deposit_algo(address,uint64)void",
            "args": method_args,
        }))

    def withdraw_algo(
        self,
        args: tuple[str, int] | WithdrawAlgoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_algo(address,uint64)void",
            "args": method_args,
        }))

    def enter_game(
        self,
        args: tuple[str, int, bytes | str, int] | EnterGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "enter_game(address,uint64,byte[],uint64)void",
            "args": method_args,
        }))

    def resolve_game(
        self,
        args: tuple[str, int, str, bytes | str] | ResolveGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resolve_game(address,uint64,address,byte[])void",
            "args": method_args,
        }))

    def swap_tokens(
        self,
        args: tuple[str, bytes | str, bytes | str, int, int] | SwapTokensArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap_tokens(address,byte[],byte[],uint64,uint64)void",
            "args": method_args,
        }))

    def release_escrow(
        self,
        args: tuple[str, int] | ReleaseEscrowArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "release_escrow(address,uint64)void",
            "args": method_args,
        }))

    def update_oracle(
        self,
        args: tuple[str, bytes | str, int] | UpdateOracleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_oracle(address,byte[],uint64)void",
            "args": method_args,
        }))

    def update_game_result(
        self,
        args: tuple[str, int, bytes | str] | UpdateGameResultArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_game_result(address,uint64,byte[])void",
            "args": method_args,
        }))

    def validate_security(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "validate_security()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class GameFiDAppCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create(
        self,
        args: tuple[str] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(address)void",
            "args": method_args,
        }))

    def deposit_algo(
        self,
        args: tuple[str, int] | DepositAlgoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deposit_algo(address,uint64)void",
            "args": method_args,
        }))

    def withdraw_algo(
        self,
        args: tuple[str, int] | WithdrawAlgoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_algo(address,uint64)void",
            "args": method_args,
        }))

    def enter_game(
        self,
        args: tuple[str, int, bytes | str, int] | EnterGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "enter_game(address,uint64,byte[],uint64)void",
            "args": method_args,
        }))

    def resolve_game(
        self,
        args: tuple[str, int, str, bytes | str] | ResolveGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resolve_game(address,uint64,address,byte[])void",
            "args": method_args,
        }))

    def swap_tokens(
        self,
        args: tuple[str, bytes | str, bytes | str, int, int] | SwapTokensArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap_tokens(address,byte[],byte[],uint64,uint64)void",
            "args": method_args,
        }))

    def release_escrow(
        self,
        args: tuple[str, int] | ReleaseEscrowArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "release_escrow(address,uint64)void",
            "args": method_args,
        }))

    def update_oracle(
        self,
        args: tuple[str, bytes | str, int] | UpdateOracleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_oracle(address,byte[],uint64)void",
            "args": method_args,
        }))

    def update_game_result(
        self,
        args: tuple[str, int, bytes | str] | UpdateGameResultArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_game_result(address,uint64,byte[])void",
            "args": method_args,
        }))

    def validate_security(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "validate_security()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class GameFiDAppSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create(
        self,
        args: tuple[str] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def deposit_algo(
        self,
        args: tuple[str, int] | DepositAlgoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deposit_algo(address,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def withdraw_algo(
        self,
        args: tuple[str, int] | WithdrawAlgoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_algo(address,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def enter_game(
        self,
        args: tuple[str, int, bytes | str, int] | EnterGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "enter_game(address,uint64,byte[],uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def resolve_game(
        self,
        args: tuple[str, int, str, bytes | str] | ResolveGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resolve_game(address,uint64,address,byte[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def swap_tokens(
        self,
        args: tuple[str, bytes | str, bytes | str, int, int] | SwapTokensArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap_tokens(address,byte[],byte[],uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def release_escrow(
        self,
        args: tuple[str, int] | ReleaseEscrowArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "release_escrow(address,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def update_oracle(
        self,
        args: tuple[str, bytes | str, int] | UpdateOracleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_oracle(address,byte[],uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def update_game_result(
        self,
        args: tuple[str, int, bytes | str] | UpdateGameResultArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_game_result(address,uint64,byte[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def validate_security(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "validate_security()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    admin: str
    treasury_algo: int
    treasury_mint: int
    treasury_spot: int
    game_fee: int
    mint_token_id: int
    spot_token_id: int
    nft_template_id: int

class LocalStateValue(typing.TypedDict):
    """Shape of local_state state key values"""
    player_algo: int
    player_mint: int
    player_spot: int
    player_stake_mint: int
    player_stake_spot: int

class GameFiDAppState:
    """Methods to access state for the current GameFiDApp app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    def local_state(
        self, address: str
    ) -> "_LocalState":
            """Methods to access local_state for the current app"""
            return _LocalState(self.app_client, address)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def admin(self) -> str:
        """Get the current value of the admin key in global_state state"""
        value = self.app_client.state.global_state.get_value("admin")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def treasury_algo(self) -> int:
        """Get the current value of the treasury_algo key in global_state state"""
        value = self.app_client.state.global_state.get_value("treasury_algo")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def treasury_mint(self) -> int:
        """Get the current value of the treasury_mint key in global_state state"""
        value = self.app_client.state.global_state.get_value("treasury_mint")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def treasury_spot(self) -> int:
        """Get the current value of the treasury_spot key in global_state state"""
        value = self.app_client.state.global_state.get_value("treasury_spot")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def game_fee(self) -> int:
        """Get the current value of the game_fee key in global_state state"""
        value = self.app_client.state.global_state.get_value("game_fee")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def mint_token_id(self) -> int:
        """Get the current value of the mint_token_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("mint_token_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def spot_token_id(self) -> int:
        """Get the current value of the spot_token_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("spot_token_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def nft_template_id(self) -> int:
        """Get the current value of the nft_template_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("nft_template_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _LocalState:
    def __init__(self, app_client: algokit_utils.AppClient, address: str):
        self.app_client = app_client
        self.address = address
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> LocalStateValue:
        """Get all current keyed values from local_state state"""
        result = self.app_client.state.local_state(self.address).get_all()
        if not result:
            return typing.cast(LocalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.local_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(LocalStateValue, converted)

    @property
    def player_algo(self) -> int:
        """Get the current value of the player_algo key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("player_algo")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def player_mint(self) -> int:
        """Get the current value of the player_mint key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("player_mint")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def player_spot(self) -> int:
        """Get the current value of the player_spot key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("player_spot")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def player_stake_mint(self) -> int:
        """Get the current value of the player_stake_mint key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("player_stake_mint")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def player_stake_spot(self) -> int:
        """Get the current value of the player_stake_spot key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("player_stake_spot")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def oracle_prices(self) -> "_MapState[bytes, int]":
        """Get values from the oracle_prices map in box state"""
        return _MapState(
            self.app_client.state.box,
            "oracle_prices",
            None
        )

    @property
    def oracle_game_results(self) -> "_MapState[int, bytes]":
        """Get values from the oracle_game_results map in box state"""
        return _MapState(
            self.app_client.state.box,
            "oracle_game_results",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class GameFiDAppClient:
    """Client for interacting with GameFiDApp smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = GameFiDAppParams(self.app_client)
        self.create_transaction = GameFiDAppCreateTransactionParams(self.app_client)
        self.send = GameFiDAppSend(self.app_client)
        self.state = GameFiDAppState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "GameFiDAppClient":
        return GameFiDAppClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "GameFiDAppClient":
        return GameFiDAppClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "GameFiDAppClient":
        return GameFiDAppClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "GameFiDAppComposer":
        return GameFiDAppComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["deposit_algo(address,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["withdraw_algo(address,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["enter_game(address,uint64,byte[],uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["resolve_game(address,uint64,address,byte[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["swap_tokens(address,byte[],byte[],uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["release_escrow(address,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_oracle(address,byte[],uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_game_result(address,uint64,byte[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["validate_security()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class GameFiDAppBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating GameFiDApp contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class GameFiDAppFactory(algokit_utils.TypedAppFactoryProtocol[GameFiDAppBareCallCreateParams, None, None]):
    """Factory for deploying and managing GameFiDAppClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = GameFiDAppFactoryParams(self.app_factory)
        self.create_transaction = GameFiDAppFactoryCreateTransaction(self.app_factory)
        self.send = GameFiDAppFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: GameFiDAppBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[GameFiDAppClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return GameFiDAppClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> GameFiDAppClient:
        """Get an app client by creator address and name"""
        return GameFiDAppClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> GameFiDAppClient:
        """Get an app client by app ID"""
        return GameFiDAppClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class GameFiDAppFactoryParams:
    """Parameters for creating transactions for GameFiDApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = GameFiDAppFactoryCreateParams(app_factory)
        self.update = GameFiDAppFactoryUpdateParams(app_factory)
        self.delete = GameFiDAppFactoryDeleteParams(app_factory)

class GameFiDAppFactoryCreateParams:
    """Parameters for 'create' operations of GameFiDApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def create(
        self,
        args: tuple[str] | CreateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def deposit_algo(
        self,
        args: tuple[str, int] | DepositAlgoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the deposit_algo(address,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "deposit_algo(address,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def withdraw_algo(
        self,
        args: tuple[str, int] | WithdrawAlgoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the withdraw_algo(address,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "withdraw_algo(address,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def enter_game(
        self,
        args: tuple[str, int, bytes | str, int] | EnterGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the enter_game(address,uint64,byte[],uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "enter_game(address,uint64,byte[],uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def resolve_game(
        self,
        args: tuple[str, int, str, bytes | str] | ResolveGameArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the resolve_game(address,uint64,address,byte[])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "resolve_game(address,uint64,address,byte[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def swap_tokens(
        self,
        args: tuple[str, bytes | str, bytes | str, int, int] | SwapTokensArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the swap_tokens(address,byte[],byte[],uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "swap_tokens(address,byte[],byte[],uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def release_escrow(
        self,
        args: tuple[str, int] | ReleaseEscrowArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the release_escrow(address,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "release_escrow(address,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_oracle(
        self,
        args: tuple[str, bytes | str, int] | UpdateOracleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_oracle(address,byte[],uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_oracle(address,byte[],uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_game_result(
        self,
        args: tuple[str, int, bytes | str] | UpdateGameResultArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_game_result(address,uint64,byte[])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_game_result(address,uint64,byte[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def validate_security(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the validate_security()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "validate_security()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class GameFiDAppFactoryUpdateParams:
    """Parameters for 'update' operations of GameFiDApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class GameFiDAppFactoryDeleteParams:
    """Parameters for 'delete' operations of GameFiDApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class GameFiDAppFactoryCreateTransaction:
    """Create transactions for GameFiDApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = GameFiDAppFactoryCreateTransactionCreate(app_factory)


class GameFiDAppFactoryCreateTransactionCreate:
    """Create new instances of GameFiDApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class GameFiDAppFactorySend:
    """Send calls to GameFiDApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = GameFiDAppFactorySendCreate(app_factory)


class GameFiDAppFactorySendCreate:
    """Send create calls to GameFiDApp contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[GameFiDAppClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return GameFiDAppClient(result[0]), result[1]


class GameFiDAppComposer:
    """Composer for creating transaction groups for GameFiDApp contract calls"""

    def __init__(self, client: "GameFiDAppClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def create(
        self,
        args: tuple[str] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "GameFiDAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create(address)void", v
            )
        )
        return self

    def deposit_algo(
        self,
        args: tuple[str, int] | DepositAlgoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "GameFiDAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.deposit_algo(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "deposit_algo(address,uint64)void", v
            )
        )
        return self

    def withdraw_algo(
        self,
        args: tuple[str, int] | WithdrawAlgoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "GameFiDAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.withdraw_algo(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "withdraw_algo(address,uint64)void", v
            )
        )
        return self

    def enter_game(
        self,
        args: tuple[str, int, bytes | str, int] | EnterGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "GameFiDAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.enter_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "enter_game(address,uint64,byte[],uint64)void", v
            )
        )
        return self

    def resolve_game(
        self,
        args: tuple[str, int, str, bytes | str] | ResolveGameArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "GameFiDAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.resolve_game(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "resolve_game(address,uint64,address,byte[])void", v
            )
        )
        return self

    def swap_tokens(
        self,
        args: tuple[str, bytes | str, bytes | str, int, int] | SwapTokensArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "GameFiDAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.swap_tokens(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "swap_tokens(address,byte[],byte[],uint64,uint64)void", v
            )
        )
        return self

    def release_escrow(
        self,
        args: tuple[str, int] | ReleaseEscrowArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "GameFiDAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.release_escrow(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "release_escrow(address,uint64)void", v
            )
        )
        return self

    def update_oracle(
        self,
        args: tuple[str, bytes | str, int] | UpdateOracleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "GameFiDAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_oracle(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_oracle(address,byte[],uint64)void", v
            )
        )
        return self

    def update_game_result(
        self,
        args: tuple[str, int, bytes | str] | UpdateGameResultArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "GameFiDAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_game_result(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_game_result(address,uint64,byte[])void", v
            )
        )
        return self

    def validate_security(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "GameFiDAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.validate_security(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "validate_security()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "GameFiDAppComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "GameFiDAppComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
