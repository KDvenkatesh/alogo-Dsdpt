{
    "name": "GameFiDApp",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "address",
                    "name": "sender"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initialize contract with creator as admin.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit_algo",
            "args": [
                {
                    "type": "address",
                    "name": "sender"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deposit ALGO to player balance.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_algo",
            "args": [
                {
                    "type": "address",
                    "name": "sender"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw ALGO from player balance.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "enter_game",
            "args": [
                {
                    "type": "address",
                    "name": "sender"
                },
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "byte[]",
                    "name": "fee_asset"
                },
                {
                    "type": "uint64",
                    "name": "fee_amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Player enters a game, fee escrowed.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resolve_game",
            "args": [
                {
                    "type": "address",
                    "name": "sender"
                },
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "address",
                    "name": "winner"
                },
                {
                    "type": "byte[]",
                    "name": "result"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resolve game, distribute rewards.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "swap_tokens",
            "args": [
                {
                    "type": "address",
                    "name": "sender"
                },
                {
                    "type": "byte[]",
                    "name": "from_asset"
                },
                {
                    "type": "byte[]",
                    "name": "to_asset"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                },
                {
                    "type": "uint64",
                    "name": "min_out"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Swap tokens (simulated) using AlgoPy types.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "release_escrow",
            "args": [
                {
                    "type": "address",
                    "name": "sender"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Admin-only release of escrowed ALGO to a receiver (simplified).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_oracle",
            "args": [
                {
                    "type": "address",
                    "name": "sender"
                },
                {
                    "type": "byte[]",
                    "name": "symbol"
                },
                {
                    "type": "uint64",
                    "name": "price"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update asset price from oracle (admin only).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_game_result",
            "args": [
                {
                    "type": "address",
                    "name": "sender"
                },
                {
                    "type": "uint64",
                    "name": "game_id"
                },
                {
                    "type": "byte[]",
                    "name": "result"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update game result from backend/oracle.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validate_security",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Run basic security checks (ensures no underflow in sample balances).",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 7,
                "bytes": 1
            },
            "local": {
                "ints": 5,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "treasury_algo": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dHJlYXN1cnlfYWxnbw=="
                },
                "treasury_mint": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dHJlYXN1cnlfbWludA=="
                },
                "treasury_spot": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dHJlYXN1cnlfc3BvdA=="
                },
                "game_fee": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2FtZV9mZWU="
                },
                "mint_token_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWludF90b2tlbl9pZA=="
                },
                "spot_token_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3BvdF90b2tlbl9pZA=="
                },
                "nft_template_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmZ0X3RlbXBsYXRlX2lk"
                }
            },
            "local": {
                "player_algo": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX2FsZ28="
                },
                "player_mint": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX21pbnQ="
                },
                "player_spot": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX3Nwb3Q="
                },
                "player_stake_mint": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX3N0YWtlX21pbnQ="
                },
                "player_stake_spot": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxheWVyX3N0YWtlX3Nwb3Q="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "oracle_prices": {
                    "keyType": "AVMBytes",
                    "valueType": "uint64",
                    "prefix": "b3JhY2xlX3ByaWNlcw=="
                },
                "oracle_game_results": {
                    "keyType": "uint64",
                    "valueType": "AVMBytes",
                    "prefix": "b3JhY2xlX3Jlc3VsdHM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        440
                    ],
                    "errorMessage": "Insufficient ALGO balance"
                },
                {
                    "pc": [
                        363
                    ],
                    "errorMessage": "Insufficient balance"
                },
                {
                    "pc": [
                        757,
                        810,
                        875
                    ],
                    "errorMessage": "Not admin"
                },
                {
                    "pc": [
                        97
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        186
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        429
                    ],
                    "errorMessage": "Only ALGO supported in demo"
                },
                {
                    "pc": [
                        602
                    ],
                    "errorMessage": "Slippage too high"
                },
                {
                    "pc": [
                        753,
                        806,
                        871
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        499
                    ],
                    "errorMessage": "check self.game_fee exists"
                },
                {
                    "pc": [
                        316,
                        358,
                        435,
                        516,
                        615,
                        680
                    ],
                    "errorMessage": "check self.player_algo exists for account"
                },
                {
                    "pc": [
                        636,
                        701
                    ],
                    "errorMessage": "check self.player_mint exists for account"
                },
                {
                    "pc": [
                        658,
                        723
                    ],
                    "errorMessage": "check self.player_spot exists for account"
                },
                {
                    "pc": [
                        329,
                        376,
                        453,
                        529,
                        761,
                        908
                    ],
                    "errorMessage": "check self.treasury_algo exists"
                },
                {
                    "pc": [
                        412,
                        494,
                        557,
                        575,
                        790,
                        864
                    ],
                    "errorMessage": "invalid number of bytes for (len+uint8[])"
                },
                {
                    "pc": [
                        309,
                        351,
                        398,
                        423,
                        473,
                        587,
                        599,
                        748,
                        801,
                        849
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        194,
                        301,
                        343,
                        391,
                        466,
                        481,
                        543,
                        740,
                        776,
                        841
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEACAIASYJDXRyZWFzdXJ5X2FsZ28LcGxheWVyX2FsZ28FYWRtaW4LcGxheWVyX21pbnQLcGxheWVyX3Nwb3QEQUxHTwhnYW1lX2ZlZQRNSU5UBFNQT1QxG0EAVTEZFEQxGESCCgTMaU6qBKhjyaQEHWjsTARZWUKWBB9i2q8EB2FHtQRsRvLUBJeO3YYEreQw1gTeFF6mNhoAjgoACQB0AJ4AzgEaAWYCKwJPApAC1QAxGRQxGBQQQzYaAUkVIxJEKkxnKCJngA10cmVhc3VyeV9taW50ImeADXRyZWFzdXJ5X3Nwb3QiZycGImeADW1pbnRfdG9rZW5faWQiZ4ANc3BvdF90b2tlbl9pZCJngA9uZnRfdGVtcGxhdGVfaWQiZyVDNhoBSRUjEkQ2GgJJFSQSRBdLASIpY0RLAQhPAilPAmYiKGVECChMZyVDNhoBSRUjEkQ2GgJJFSQSRBdLASIpY0RJSwIPREsBCU8CKU8CZiIoZURMCShMZyVDNhoBSRUjEkQ2GgIVJBJENhoDSSJZgQIISwEVEkRXAgA2GgRJFSQSRBdMJwUSREsBIiljRElLAg9ESwEJTwIpTwJmIihlRAgoTGclQzYaARUjEkQ2GgIVJBJENhoDSRUjEkQ2GgRJIlmBAghMFRJEIicGZURJgQkLgQoKTEsBCUsCIiljRE8CCE8CKU8CZiIoZUQIKExnJUM2GgFJFSMSRDYaAkkiWYECCEsBFRJEVwIASTYaA0kiWYECCEsBFRJEVwIATDYaBEkVJBJEF0lOAjYaBUkVJBJEFw9EJwUSQQANSwNJIiljREsCCSlMZksCJwcSQQANSwNJIitjREsCCStMZksCJwgSQQAPSwNJIicEY0RLAgknBExmSwEnBRJBAA1LA0kiKWNESwIIKUxmSwEnBxJBAA1LA0kiK2NESwIIK0xmSwEnCBJBAA9LA0kiJwRjREsCCCcETGYlQzYaAUkVIxJENhoCSRUkEkQXIiplRE8CEkQiKGVETAkoTGclQzYaAUkVIxJENhoCSSJZgQIISwEVEkRXAgA2GgNJFSQSRBciKmVETwMSRIANb3JhY2xlX3ByaWNlc08CUEwWvyVDNhoBSRUjEkQ2GgJJFSQSRBc2GgNJIlmBAghLARUSRFcCACIqZURPAxJETBaADm9yYWNsZV9yZXN1bHRzTFBJvEhMvyVDIihlRQFD",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}